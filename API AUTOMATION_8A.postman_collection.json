{
	"info": {
		"_postman_id": "dc4bc8ef-85fb-448c-8a3d-f6e05ccd0f19",
		"name": "API AUTOMATION_8A",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get All  Todo Entries",
			"item": [
				{
					"name": "Get All Todo Entries",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();  \r",
									"console.log(jsonData.entry[10].id);\r",
									"console.log(jsonData.entry[1].title)\r",
									"\r",
									"pm.environment.set(\"entityId\", jsonData.entry[10].id);\r",
									"pm.environment.set(\"entityTitle\", jsonData.entry[1].title);\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Status code should be 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();  \r",
									"console.log(jsonData)\r",
									"console.log(jsonData.totalResults)\r",
									"console.log(jsonData.entry[14].title)\r",
									"console.log(jsonData.entry[7].status)\r",
									"console.log(jsonData.entry[10].id)\r",
									"\r",
									"\r",
									"pm.test(\"confirm that the total result should be 31\", function () {  \r",
									"    pm.expect(jsonData.totalResults).to.eql(\"31\");\r",
									"});\r",
									"\r",
									"pm.test(\"confirm that the total result should be 31\", function () {  \r",
									"    pm.expect(jsonData.totalResults).to.eql(\"31\");\r",
									"});\r",
									"\r",
									"pm.test(\"confirm that the total result should be 31\", function () {  \r",
									"    pm.expect(jsonData.entry[14].title).to.eql(\"Task 15\");\r",
									"});\r",
									"\r",
									"pm.test(\"confirm that the total entry with Task 11 ID is 10\", function () {  \r",
									"    pm.expect(jsonData.entry[10].id).to.eql(\"11\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body is correct\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"31\");\r",
									"});\r",
									"\r",
									"pm.test(\"confirm that Task 1 is present\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Task 1\");\r",
									"});\r",
									"\r",
									"pm.test(\"confirm that Task 3 is present\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Task 3\");\r",
									"});\r",
									"\r",
									"/**\r",
									" * \r",
									" */"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/todo",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"todo"
							],
							"query": [
								{
									"key": "title",
									"value": "Task 5",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Todo Entries with title",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									"",
									"var jsonData = pm.response.json();  ",
									"console.log(jsonData)",
									"console.log(jsonData.totalResults)",
									"console.log(jsonData.entry[10].title)",
									"",
									"",
									"pm.test(\"confirm that the total result should be 31\", function () {  ",
									"    pm.expect(jsonData.totalResults).to.eql(\"31\");",
									"});",
									"",
									"pm.test(\"confirm that the total result should be 31\", function () {  ",
									"    pm.expect(jsonData.totalResults).to.eql(\"31\");",
									"});",
									"",
									"pm.test(\"confirm that the total result should be 31\", function () {  ",
									"    pm.expect(jsonData.entry[10].title).to.eql(\"Task 11\");",
									"});",
									"",
									"",
									"pm.test(\"Body is correct\", function () {",
									"    pm.response.to.have.body();",
									"});",
									"",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"31\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/todo/?title",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"todo",
								""
							],
							"query": [
								{
									"key": "title",
									"value": null
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get All Entries",
			"item": [
				{
					"name": "Get All Entries",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									"var jsonData = pm.response.json();  ",
									"console.log(jsonData)",
									"",
									"",
									"pm.test(\"Body is correct\", function () {",
									"    pm.response.to.have.body();",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"5.0.5.0\");",
									"});",
									"",
									"pm.test(\"confirm that fusio is present\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"fusio\");",
									"});",
									"",
									"pm.test(\"confirm that documentation is present in apps \", function () {",
									"    pm.expect(pm.response.text()).to.include(\"fusio\");",
									"});",
									"",
									"pm.test(\"confirm that authorization is in categories \", function () {",
									"    pm.expect(pm.response.text()).to.include(\"fusio\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/index.php",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"index.php"
							]
						},
						"description": "https://demo.fusio-project.org/index.php/"
					},
					"response": []
				}
			]
		},
		{
			"name": "Get Entry Per ID",
			"item": [
				{
					"name": "Get entry per ID_Valid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									"",
									"var jsonData = pm.response.json();  ",
									"console.log(jsonData)",
									"console.log(jsonData.totalResults)",
									"console.log(jsonData.entry[1].title)",
									"",
									"pm.test(\"confirm that the total result should be 31\", function () {  ",
									"    pm.expect(jsonData.totalResults).to.eql(\"31\");",
									"});",
									"",
									"pm.test(\"confirm that the total result should be 31\", function () {  ",
									"    pm.expect(jsonData.totalResults).to.eql(\"31\");",
									"});",
									"",
									"pm.test(\"confirm that the total result should be 31\", function () {  ",
									"    pm.expect(jsonData.entry[1].title).to.eql(\"Task 2\");",
									"});",
									"",
									"pm.test(\"Body is correct\", function () {",
									"    pm.response.to.have.body();",
									"});",
									"",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"31\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{todo}}/todo/?todo_id={{entityId}}",
							"host": [
								"{{todo}}"
							],
							"path": [
								"todo",
								""
							],
							"query": [
								{
									"key": "todo_id",
									"value": "{{entityId}}"
								}
							]
						},
						"description": "https://demo.fusio-project.org/index.php/todo/:todo_id"
					},
					"response": []
				},
				{
					"name": "Get entry per ID_Invalid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									"",
									"var jsonData = pm.response.json();  ",
									"console.log(jsonData)",
									"console.log(jsonData.totalResults)",
									"console.log(jsonData.entry[1].title)",
									"",
									"pm.test(\"confirm that the total result should be 31\", function () {  ",
									"    pm.expect(jsonData.totalResults).to.eql(\"31\");",
									"});",
									"",
									"pm.test(\"confirm that the total result should be 31\", function () {  ",
									"    pm.expect(jsonData.totalResults).to.eql(\"31\");",
									"});",
									"",
									"pm.test(\"confirm that the total result should be 31\", function () {  ",
									"    pm.expect(jsonData.entry[1].title).to.eql(\"Task 2\");",
									"});",
									"",
									"pm.test(\"Body is correct\", function () {",
									"    pm.response.to.have.body();",
									"});",
									"",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"31\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/todo/?todo_id=",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"todo",
								""
							],
							"query": [
								{
									"key": "todo_id",
									"value": ""
								}
							]
						},
						"description": "https://demo.fusio-project.org/index.php/todo/:todo_id"
					},
					"response": []
				}
			]
		},
		{
			"name": "Get Books",
			"item": [
				{
					"name": "Get Books",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"const response = pm.response.json();\r",
									"// print any kind of variables/message on the screen\r",
									"console.log(response[2].name);\r",
									"pm.test(\"Search for a book name called Viscount Who Loved Me\", function (){\r",
									"    pm.expect(response[3].name).to.eql(\"Viscount Who Loved Me\")\r",
									"});\r",
									"\r",
									"/*const Fiction = response.filter((book) => book.type === \"fiction\");\r",
									"console.log(Fiction)\r",
									"//Print out the id of a fiction book that is available called \"The Midnight Library\"*/\r",
									"\r",
									"const Fiction = response.filter((book) => book.type === \"fiction\" && book.available === true && book.name === \"Viscount Who Loved Me\")\r",
									"\r",
									"console.log(Fiction[0].id);\r",
									"\r",
									"pm.test(\"The id number of a fiction book that available with the name The Midnight Library is \" , function () {\r",
									"    pm.expect(Fiction[0].name).eql(\"Viscount Who Loved Me\")\r",
									"});\r",
									"\r",
									"pm.globals.set(\"bookId\", Fiction[0].id);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{orders}}/books?type=fiction",
							"host": [
								"{{orders}}"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "type",
									"value": "fiction"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Place A Book Order",
			"item": [
				{
					"name": "Place a book order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"bookId\": 1,\n  \"customerName\": \"John\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{orders}}/orders",
							"host": [
								"{{orders}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Place a book order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"bookId\": \"1\",\n  \"customerName\": \"John\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{orders}}/orders",
							"host": [
								"{{orders}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get All Oders",
			"item": [
				{
					"name": "Get all orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"Unauthorized\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{orders}}/orders",
							"host": [
								"{{orders}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get An Order",
			"item": [
				{
					"name": "Get an order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"Unauthorized\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "03c5abfe090876ab74a2a2ac4c079174a35fd88c9b88cd2164ff4b9d56c31d6c",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"customerName\": \"John\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{orders}}/orders/:orderId",
							"host": [
								"{{orders}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "bl8ZbxUCq59bH8DyYWvjo"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete An Order",
			"item": [
				{
					"name": "Delete an order",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string Unauthorized\", function () {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "03c5abfe090876ab74a2a2ac4c079174a35fd88c9b88cd2164ff4b9d56c31d6c",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{orders}}/orders/:orderId",
							"host": [
								"{{orders}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "bl8ZbxUCq59bH8DyYWvjo"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}